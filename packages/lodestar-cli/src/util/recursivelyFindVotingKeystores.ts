import fs from "fs";
import path from "path";
import {VOTING_KEYSTORE_FILE} from "../validatorDir/paths";

export function recursivelyFindVotingKeystores(dirPath: string, keystorePaths: string[] = []): string[] {
  for (const filename of fs.readdirSync(dirPath)) {
    const filepath = path.join(dirPath, filename);
    if (fs.statSync(filepath).isDirectory()) {
      recursivelyFindVotingKeystores(filepath, keystorePaths);
    } else if (isVotingKeystore(filename)) {
      keystorePaths.push(filepath);
    }
  }
  return keystorePaths;
}

/**
 * Returns `true` if we should consider the `file_name` to represent a voting keystore.
 */
export function isVotingKeystore(filename: string): boolean {
  // All formats end with `.json`.
  return filename.endsWith(".json") &&
    // Keystores generated by clients
    (filename === VOTING_KEYSTORE_FILE ||
    // The format exported by the `eth2.0-deposit-cli` library.
    //
    // Reference to function that generates keystores:
    // eslint-disable-next-line max-len
    // https://github.com/ethereum/eth2.0-deposit-cli/blob/7cebff15eac299b3b1b090c896dd3410c8463450/eth2deposit/credentials.py#L58-L62
    //
    // Since we include the key derivation path of `m/12381/3600/x/0/0` this should only ever match
    // with a voting keystore and never a withdrawal keystore.
    //
    // Key derivation path reference:
    //
    // https://eips.ethereum.org/EIPS/eip-2334
    /keystore-m_12381_3600_[0-9]+_0_0-[0-9]+.json/.test(filename));
}